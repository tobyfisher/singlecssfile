// ** Copyright (C) 2020, OpenEyes Foundation. This file is part of OpenEyes.
// ** OpenEyes is free software; and is distributed, WITHOUT ANY WARRANTY under the terms of AGPL 3.0 licence.


// CSS Vars (Custom selectors) for theme colours.
// Default :root is "dark", JS can add a theme class
// to <HTML> to change the theme colours e.g. "theme-light"

@mixin cssVars( $group, $map ) {
	@each $type, $prop in $map {
		--#{$group}-#{$type}: #{$prop};
	}
}

// defaults groups for "dark" theme settings

// ---- Backgrounds
$bg: (
	"html": #161e2a,
	"header": #161e2a,
	"max": #000,
	"popup":#0D161E,
	"title": #2a3441,
	"event": #1E2E42,
	"data": #121A22,
	"grey": rgb(40, 52, 66)
);

$bg-light: (
	"html": #E1E0E0,
	"header": #bebdbd,
	"max": #FFF,
	"popup": #f1f0f0,
	"title": #d9d9d9,
	"event": #d7d6d6,
	"data": #F5F5F5,
	"grey": rgb(220, 220, 220)
);

// ---- Font weights (because white on dark bleeds and looks thicker...)
$font-weight: (
	"thin": 100,
	"light": 300,
	"medium": 400,
	"bold": 500
);

$font-weight-light: (
	"thin": 300,
	"light": 400,
	"medium": 500,
	"bold": 700
);

// ---- Text
$txt: (
	"base": rgb(220, 220, 220),
	"light": rgb(140, 140, 140),
	"active": rgb(90, 180, 180),
	"highlight": rgb(0, 200, 205),
	"invert": rgb(13, 13, 13)
);

$txt-light: (
	"base": rgb(10, 10, 10),
	"light": rgb(90, 90, 100),
	"active": rgb(0, 0, 180),
	"highlight": rgb(0, 0, 255),
	"invert": rgb(240, 240, 240),
);

// ---- GUI
$gui: (
	"spinner": rgb(0, 255, 255),
	"line": rgb(0, 60, 70),
	"scroll-track":rgb(10, 10, 15),
	"scroll-thumb":rgb(55, 55, 60),
);

$gui-light: (
	"spinner": rgb(0, 180, 255),
	"line": rgb(162, 160, 160),
	"scroll-track":rgb(95, 95, 100),
	"scroll-thumb":rgb(170, 170, 170),
);

// ---- Buttons
$btn: (
	"base":rgb(33,	46,	64	),
	"blue": #1D2E50,
	"blue-hint": #074598,
	"blue-active": #00f,
	"green": #0E9019,
	"green-hint": #0E9019,
	"green-active": hsl(122, 77%, 17%),
	"red": rgb(153, 14, 14),
	"red-hint": hsl(360, 83%, 28%),
	"red-active": hsl(360, 83%, 23%),
	"disabled": rgb(80, 80, 80),
	"icon-hover-filter": none,
);

$btn-light: (
	"base": rgb(78, 117, 202),
	"blue": rgb(7, 79, 182),
	"blue-hint": rgb(6, 68, 147),
	"blue-active": #00f,
	"green": rgb(14, 144, 25),
	"green-hint": hsl(125, 82%, 26%),
	"green-active": hsl(125, 82%, 21%),
	"red": rgb(153, 14, 14),
	"red-hint": hsl(360, 83%, 28%),
	"red-active": hsl(360, 83%, 23%),
	"disabled": rgb(150, 150, 150),
	"icon-hover-filter": invert(100%) grayscale(100%),
);

// ---- Colors (alerts, flags, pathsteps, wait, etc)
$color: (
	"highlighter": rgb(184, 171, 136),
	"green": rgb(0, 105, 0),
	"red": rgb(155, 0, 0),
	"burgundy": rgb(107, 20, 0),
	"orange": rgb(160, 85, 0),
	"yellow": rgb(200, 180, 50),
	"grey": rgb(80, 80, 80),
);

$color-light: (
	"highlighter": rgb(235, 211, 123),
	"green": rgb(0, 155, 0),
	"red": rgb(205, 0, 0),
	"burgundy": rgb(117, 30, 0),
	"orange": rgb(220, 115, 5),
	"yellow": rgb(210, 170, 20),
	"grey": rgb(140, 140, 140),
);


// ---- Inputs
$input: (
	"scheme": "dark",
	"focus-outline": rgb(9, 108, 154),
	"base": rgb(0, 0, 0),
	"text": rgb(255, 255, 255),
	"border": rgb(70, 70, 70),
	"placeholder": rgb(100, 100, 100),
	"blue": rgb(0, 120, 255),
	"label": rgb(30, 30, 30) // label/input highlight group
);

$input-light: (
	"scheme": "light",
	"focus-outline": rgb(7, 1, 224),
	"base": rgb(255, 255, 255),
	"text": rgb(0, 0, 0),
	"border": rgb(210, 210, 210),
	"placeholder": rgb(181, 181, 181),
	"blue": rgb(0, 50, 255),
	"label": rgba(255, 255, 255, 0.5)
);

// ---- SVG icons

$themedIcons: ("plus", "minus", "plus-bold", "minus-bold", "arrow-down", "arrow-up", "arrow-down-bold", "arrow-up-bold", "arrow-right-bold",
"arrow-left-bold", "direction-up", "direction-down", "direction-right", "direction-left", "direction-horizontal",
"direction-right-circle", "direction-left-circle", "direction-up-circle", "direction-down-circle", "remove-circle",
"plus-circle", "tick-circle", "move", "child-arrow", "parent-arrow", "menu", "trash", "duplicate", "print", "search", "zoom-in",
"zoom-out", "filter", "tick", "remove", "cog", "download", "info", "exclamation", "asterisk", "pencil", "eye",
"comments", "comments-added", "comments-who", "start", "stop", "range", "top", "reduce-height", "increase-height", "change", "d-slash",
"expand", "collapse", "downup", "rewind", "forward", "undo", "reset", "sync", "time", "audit-trail", "male", "female", "triangle",
"drug-rx", "formulary", "injection", "drop", "drop-done", "flag", "flagline", "star", "starline", "no-permissions",
"fork", "path-break", "waiting", "eyelat-R", "eyelat-L", "more-h", "status-urgent", "status-query", "doubt", "padlock");

// not available via <i>, only for CSS
$uiThemedIcons: ("face", "element-divider", "btn-goto", "tab-more-h", "tab-whiteboard", "tab-print", "tab-trash", "watermark-patient",
"nystagmus-arrow-h-1", "nystagmus-arrow-h-2", "nystagmus-arrow-h-3");


// -- these work across both themes:
$rgbIcons: ("circle-blue", "circle-green", "circle-yellow", "circle-orange", "circle-red", "circle-grey",
"triangle-blue", "triangle-green", "triangle-orange", "triangle-red", "triangle-grey", "exclamation-green", "exclamation-orange", "exclamation-red",
"flag-green", "flag-orange", "flag-red", "flag-grey", "mpr-green", "mpr-orange", "mpr-red", "warning-none", "warning", "cross-red",);


$uiIcons: ("list-dot");

// *********************
// CSS custom properties
:root {

	// currently both groups use "--i-ui-" prefix but this might need changing (ok, for now)
	@each $icon in $rgbIcons {
		--i-ui-#{$icon}: url("../svg/in-css/all/i/#{$icon}.svg");
	}
	@each $icon in $uiIcons {
		--i-ui-#{$icon}: url("../svg/in-css/all/ui/#{$icon}.svg");
	}
}

// *********************
// "dark": requires "theme-dark" class on <HTML>
html.theme-dark {

	@each $icon in $themedIcons {
		--i-#{$icon}: url("../svg/in-css/dark/i/#{$icon}.svg");
	}

	@each $icon in $uiThemedIcons {
		--i-#{$icon}: url("../svg/in-css/dark/ui/#{$icon}.svg");
	}

	@include cssVars("bg", $bg);
	@include cssVars("txt", $txt);
	@include cssVars("font", $font-weight);
	@include cssVars("gui", $gui);
	@include cssVars("btn", $btn);
	@include cssVars("color", $color);
	@include cssVars("input", $input);
}


// *********************
// "light": requires "theme-light" class on <HTML>
html.theme-light {

	@each $icon in $themedIcons {
		--i-#{$icon}: url("../svg/in-css/light/i/#{$icon}.svg");
	}

	@each $icon in $uiThemedIcons {
		--i-#{$icon}: url("../svg/in-css/light/ui/#{$icon}.svg");
	}

	@include cssVars("bg", $bg-light);
	@include cssVars("txt", $txt-light);
	@include cssVars("font", $font-weight-light);
	@include cssVars("gui", $gui-light);
	@include cssVars("btn", $btn-light);
	@include cssVars("color", $color-light);
	@include cssVars("input", $input-light);

}


