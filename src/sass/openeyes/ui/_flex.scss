// ** Copyright (C) 2020, OpenEyes Foundation. This file is part of OpenEyes.
// ** OpenEyes is free software; and is distributed, WITHOUT ANY WARRANTY under the terms of AGPL 3.0 licence.

@use "openeyes/mix" as *;

.flex {
	@include flex( center, space-between );
	&.f-w {
		flex-wrap: wrap;
	}
}

.flex-l {
	@include flex( center, flex-start );
}

.flex-r {
	@include flex( center, flex-end );
}

.flex-t {
	@include flex( flex-start, space-between) ;
}

.flex-c {
	@include flex( center, center );
}

.flex-t-l {
	@include flex(flex-start, flex-start );
}
.flex-t-r {
	@include flex(flex-start, flex-end );
}

// for content items in a flex
.flex-fill {
	flex:1 1 0;
}

.flex-fill-2 {
	flex:2 1 0;
}

// gaps
.flex-gap {
	gap: 10px;
}

// 'col-gap': the old approach to provide a gutter, used padding and was also used in <td>
// (pre-flex days) switching it over to 'gap', to capture old usages but they will probably need
// some reviewing to update the UI approach:
// ... standardising to gap-x

.col-gap-small,
.gap-3 {
	gap:3px;
}

.col-gap,
.gap-30 {
	gap:30px;
}

.gap-5 {
	gap:5px;
}

.gap-10 {
	gap:10px;
}

// original flex 'layout' classes, still used all over the place
// above short-hand classes are now the preferred approach but these
// must be supported
.flex-layout {
	display:flex;
	align-items:center;				// vertical alignment (no stretch)
	justify-content:space-between; 	// make sure items align to left AND right edge;

	// horizontal alignments
	&.flex-right {
		justify-content:flex-end; 		// group items to the right
	}
	&.flex-left {
		justify-content:flex-start; 	// group items to the left
	}
	&.flex-center {
		justify-content:center; 		// group items in the center
	}

	&.flex-top {
		align-items:flex-start;			// vertical top
	}
	&.flex-stretch {
		align-items:stretch;			// fill vertical space
	}
}

// as far as i know this only used by the adder button in Elements
// it could probably be better named and moved in with the Element stuff
// however, leaving it here in case used somewhere else! 
.flex-item-bottom {
	align-self: flex-end; // item - bottom
}
