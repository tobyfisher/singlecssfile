// ** Copyright (C) 2020, OpenEyes Foundation. This file is part of OpenEyes.
// ** OpenEyes is free software; and is distributed, WITHOUT ANY WARRANTY under the terms of AGPL 3.0 licence.


@use 'sass:math';

// Create REM font-sizes. based on 16px base font-size
// @access public
// @param {sizePixel} $sizePixel - size as px
@mixin font-size($sizePixel) {
  $rem: math.div($sizePixel, 16);
  font-size: #{$rem}rem;
}

// Specific widths
// OE needs to work on Galaxy Tabs and iPad (Pro)
// HTML viewport scaling gives us: 1200 (600) and 768 (1536)
// note: Although, it fits fine on iPad, it will be half sized
// therefore, handheld modifications need to be below 1600 
// BUT only if it's in portrait.
@mixin handheld() {
	@media only screen 
		and (min-width: $oe-minimum-viewport-width)
		and (orientation: portrait){
		@content;
	}	
}

// Stretching width
// There is a layout "grey" area between 1280px and 1200px 
// some elements in this size need to be flexible 
@mixin stretching(){
	@media only screen 
		and (min-width: $oe-minimum-viewport-width - 1px)
		and (max-width: #{$oe-event-main-default-width + $oe-event-sidebar-width} ){
		@content;
	}
}

// Squeeze (special elements)
// Elements that have to be squeezed to make the UI work below 1265px.
// (1280px is actually 1265px, allowing for old skool scroll bars)
@mixin squeeze(){
	@media only screen 
		and (max-width: 1265px ){
		@content;
	}
}

// Extended width 
@mixin extended(){
	@media only screen 
		and (min-width: $oe-extended-browser-size){
		@content;
	}
}

// Flag a minimum width issue on any device
@mixin below-minimum(){
	@media only screen 
		and (max-width: #{$oe-minimum-viewport-width - 1px}){
		@content;
	}
}

// Fix hotlist
@mixin fix-hotlist(){
	@media only screen
		and (min-width: $oe-js-browser-fix-size){
		@content;	
	}
}

// Super Wide!
@mixin super-wide(){
	@media only screen
		and (min-width: $oe-super-wide-display){
		@content;	
	}
}

// -----------------------
// !! OE Portal only !!
// OE is running at initial scale of 0.5 to be able to work on tablets
// Portal is running at scale 1.0
// -----------------------

// specific device sizes: iphone 8+ is 414px
// but actuall UI fails below 600px (Galaxy Tab)
@mixin phone(){
	@media only screen 
		and (max-width: 590px ){
		@content;
	}
}

// landscape - need to be carefully here. 
// target smartphones using height and width 
@mixin phone-landscape(){
	@media only screen 
		and (orientation: landscape)
		and (max-height: 420px )
		and (max-width: 900px ){
		@content;
	}
}

// some settings need to be applied to both of the above
@mixin phone-all(){
	@media only screen 
		and (max-width: 590px ){
		@content;
	}
	@media only screen 
		and (orientation: landscape)
		and (max-height: 420px )
		and (max-width: 900px ){
		@content;
	}
}



// specific device sizes: Galaxy Tab 3 is 800px
@mixin tablet(){
	@media only screen 
		and (max-width: 801px ){
		@content;
	}
}

// above/wider! : Galaxy Tab is 800px
// iPad Pro can run like as normal
@mixin wider-than-tablet(){
	@media only screen 
		and (min-width: 801px ){
		@content;
	}
}

// Media queries
// Generic media query for minimum width
@mixin media($width) {
  @media only screen and (min-width: $width) {
    @content;
  }
}


// ------------------------------ Patterns
// Flex
// vertical | horizontal
@mixin flex($v,$h){
	display:flex;
	justify-content: $h;
	align-items: $v;	
}

@mixin inline-flex($v,$h){
	display:inline-flex;
	justify-content: $h;
	align-items: $v;	
}

// standardise box-shadows for popups
@mixin boxshadow(){
	// offset-x | offset-y | blur-radius | spread-radius | color
	box-shadow: 1px 1px 2px 2px rgba(0, 0, 0, 0.2);
}


// ------------------------------ CSS Tricks

/// Slightly lighten a color
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}


// ------------------------------ Inputs and Buttons

$oe-selector-form-input-fields: 'input[type="text"],input[type="password"],input[type="date"],input[type="datetime"],input[type="datetime-local"],input[type="month"],input[type="week"],input[type="email"],input[type="number"],input[type="search"],input[type="tel"],input[type="time"],input[type="url"],textarea';
$oe-selector-form-button-fields: 'button, .button';
$oe-selector-form-select-fields: "select";

// Apply a set of rules to input form fields.
@mixin input-form-fields {
	#{$oe-selector-form-input-fields} {
		@content;
	}
}

// Apply a set of rules to button form fields.
@mixin button-form-fields {
	#{$oe-selector-form-button-fields} {
		@content;
	}
}

// Apply a set of rules to select form fields.
@mixin select-form-fields {
	#{$oe-selector-form-select-fields} {
		@content;
	}
}

// Apply a set of rules for all form fields.
@mixin all-form-fields {
	#{$oe-selector-form-input-fields},
	#{$oe-selector-form-button-fields},
	#{$oe-selector-form-select-fields} {
		@content;
	}
}

// Apply a set of rules to buttons.
@mixin buttons {
	button, .button {
		@content;
	}
}




